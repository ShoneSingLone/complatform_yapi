; (async function useIdbKeyVal() { const isDev = !!localStorage.isDev; var camelizeRE = /\/|\.|_|-(\w)/g; function $id(a) { return document.getElementById(a); } function $tags(a) { return document.getElementsByTagName(a); } function last(a) { return a.length ? a[a.length - 1] : false; } function camelCase(a) { return (str && str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ""; })); } const $idb = (function idb_keyval() { function promisifyRequest(a) { return new Promise((resolve, reject) => { a.oncomplete = a.onsuccess = () => resolve(a.result); a.onabort = a.onerror = () => reject(a.error); }); } function createStore(a, b) { const request = indexedDB.open(a); request.onupgradeneeded = () => request.result.createObjectStore(b); const dbp = promisifyRequest(request); return (txMode, callback) => dbp.then(db => callback(db.transaction(b, txMode).objectStore(b))); } let defaultGetStoreFunc; function defaultGetStore() { if (!defaultGetStoreFunc) { defaultGetStoreFunc = createStore("keyval-store", "keyval"); } return defaultGetStoreFunc; } function get(key, customStore = defaultGetStore()) { return customStore("readonly", store => promisifyRequest(store.get(key))); } function set(key, value, customStore = defaultGetStore()) { return customStore("readwrite", store => { store.put(value, key); return promisifyRequest(store.transaction); }); } function del(key, customStore = defaultGetStore()) { return customStore("readwrite", store => { store.delete(key); return promisifyRequest(store.transaction); }); } function clear(customStore = defaultGetStore()) { return customStore("readwrite", store => { store.clear(); return promisifyRequest(store.transaction); }); } function eachCursor(a, b) { a.openCursor().onsuccess = function () { if (!this.result) return; b(this.result); this.result.continue(); }; return promisifyRequest(a.transaction); } function keys(customStore = defaultGetStore()) { return customStore("readonly", store => { if (store.getAllKeys) { return promisifyRequest(store.getAllKeys()); } const items = []; return eachCursor(store, cursor => items.push(cursor.key)).then(() => items); }); } return { get, set, keys, clear, del }; })(); let LOADING_IMAGE_NAME = "x-loading"; (function loadBaseInfo() { const srcRootDom = $id("src-root"); const { src } = srcRootDom; const [srcRoot] = src.split("/common/libs/seed"); const { appName, appEntryName, appVersion, loadingImg } = srcRootDom.dataset; if (!appName) { alert("miss APP_NAME"); } LOADING_IMAGE_NAME = loadingImg || "x-loading"; window.SRC_ROOT_PATH = srcRoot || ""; window.APP_NAME = appName || ""; window.APP_ENTRY_NAME = appEntryName || "entry"; window.APP_VERSION = "" || appVersion || ""; let I18N_LANGUAGE = localStorage["X-Language"] || $tags("html")[0].lang || "zh-CN"; if (!["zh-CN", "en-US"].includes(I18N_LANGUAGE)) { console.error(`I18N_LANGUAGE is not valid ${I18N_LANGUAGE}`); I18N_LANGUAGE = "zh-CN"; } localStorage["X-Language"] = I18N_LANGUAGE; window.I18N_LANGUAGE = I18N_LANGUAGE; })(); function execXHR(b) { return new Promise((resolve, reject) => { try { var c = new XMLHttpRequest(); c.onprogress = updateProgress; c.onload = transferComplete; c.onerror = transferFailed; c.onabort = transferCanceled; c.open("GET", `${b}?_t=${Date.now()}`); c.send(); function updateProgress(a) { if (a.lengthComputable && a.total) { } else { } } function transferComplete({ currentTarget }) { if (currentTarget.status === 404) { reject(404); } else { resolve(currentTarget.responseText); } } function transferFailed(a) { console.log("An error occurred while transferring the file."); } function transferCanceled(a) { console.log("The transfer has been canceled by the user."); } } catch (error) { debugger; } }); } function $val(a, b, c) { a = a || {}; const isVue2 = a._isVue; const fnVue$set = a.$set; if (typeof b != "string") { throw new Error("prop must be a string"); } const propArray = b.split("."); let key = ""; let nextItem = a; const setVal = () => { while ((key = propArray.shift())) { if (propArray.length === 0) { if (isVue2) { fnVue$set(nextItem, key, c); } else { Vue?.set && Vue?.set(nextItem, key, c); nextItem[key] = c; } return; } else { const _nextItem = nextItem[key]; if (!_nextItem) { if (isVue2) { fnVue$set(nextItem, key, {}); } else { nextItem[key] = {}; } } nextItem = nextItem[key]; } } }; const getVal = () => { while ((key = propArray.shift())) { const _nextItem = nextItem[key]; if (!_nextItem) { return nextItem[key]; } else { if (propArray.length === 0) { return _nextItem; } else { nextItem = nextItem[key]; } } } return nextItem; }; if (c !== undefined) { setVal(isVue2, key, propArray, nextItem, c); } else { return getVal(isVue2, key, propArray, nextItem); } return a; } function $resolvePath(url) { let lodash = window._; let resolvedURL = $resolvePath.cache[url]; if (resolvedURL) { return resolvedURL; } resolvedURL = url; try { if (lodash?.THIS_FILE_URL) { let parentURL = last(lodash.THIS_FILE_URL); const parentResolvedURL = $resolvePath.cache[parentURL]; if (parentResolvedURL) { parentURL = parentResolvedURL.split("/"); if (/^\.\//.test(url)) { parentURL[parentURL.length - 1] = String(url).replace("./", ""); url = parentURL.join("/"); } if (/^\.\.\//.test(url)) { parentURL[parentURL.length - 1] = String(url).replace("./", ""); url = parentURL.join("/"); } } } } catch (error) { console.error(error); } if (/^@/.test(url)) { resolvedURL = String(url).replace(/^@/, `${SRC_ROOT_PATH}/business_${APP_NAME}`); } if (/^\/common\//.test(url)) { resolvedURL = `${SRC_ROOT_PATH}${url}`; } $resolvePath.cache[url] = resolvedURL; return resolvedURL; } $resolvePath.cache = {}; async function $loadText(a) { return new Promise(async (resolve, reject) => { const key = camelCase(a); if ($loadText.pendding[key]) { $loadText.pendding[key].push({ resolve, reject }); } else { $loadText.pendding[key] = [{ resolve, reject }]; try { const _url = $resolvePath(a); const res = await execXHR(_url); $loadText.pendding[key].forEach(({ resolve }) => resolve(res)); } catch (error) { $loadText.pendding[key].forEach(({ reject }) => reject(error)); } finally { delete $loadText.pendding[key]; } } }); } $loadText.pendding = {}; const $loadTextCacheify = async function (a) { const key = camelCase(a); let res = await $idb.get(key); if (!res) { res = await $loadText(a); await $idb.set(key, res); } return res; }; const _$loadText = (function () { if (!localStorage.isDev && APP_VERSION) { return $loadTextCacheify; } return $loadText; })(); const _$asyncLoadOrderAppendScrips = async function (a) { console.time("框架基本依赖"); return new Promise(async resolve => { const appdScripts = () => { const body = $tags("body")[0]; for (const [url, innerHtml, callback] of a) { const id = camelCase(url); $script = document.createElement("script"); $script.id = id; $script.innerHTML = innerHtml; body.appendChild($script); if (typeof callback === "function") { callback(); } } console.timeEnd("框架基本依赖"); resolve(); }; let complateCount = 0; a.forEach(async deep => { const innerHtml = await _$loadText(deep[0]); deep[1] = innerHtml; complateCount++; if (complateCount === a.length) { appdScripts(); } }); }); }; async function $appendScript(b, c, d) { try { const id = camelCase(b); let $script = $id(id); if (!$script) { $script = document.createElement("script"); $script.id = id; if (_SCRIPT_USE_SRC) { await new Promise(resolve => { $script.src = $resolvePath(b); $script.onload = function (a) { console.log("event.currentTarget.id", a.currentTarget.id); resolve(a.currentTarget.id); }; const body = $tags("body")[0]; body.appendChild($script); }); } else { const innerHtml = await _$loadText(b); $script.innerHTML = innerHtml; const body = $tags("body")[0]; body.appendChild($script); } } if (globalName) { return $val(window, globalName); } } catch (error) { console.error(error); } } function $resolveCssAssetsPath(a) { a = a.replace(/\/common\/(assets|libs|ui-element|ui-tiny)/g, path => $resolvePath(path)); a = a.replace(/\/@\//g, $resolvePath("@/")); return a; } async function $appendStyle(a, b) { const innerHtml = await (async function () { if (!styleSourceCode) { styleSourceCode = await _$loadText(a); styleSourceCode = $resolveCssAssetsPath(styleSourceCode); } if (window._CURENT_IS_MOBILE) { const pxReg = /([-+]?[0-9]*\.?[0-9]+)px/g; styleSourceCode = styleSourceCode.replace(pxReg, (full, num) => { return `${num}rem`; }); } return styleSourceCode; })(); if (!innerHtml) { return; } const id = camelCase(a); let $style = $id(id); if (!$style) { $style = document.createElement("style"); $style.id = id; const body = $tags("body")[0]; body.appendChild($style); } $style.innerHTML = innerHtml; } (async function bootstrap() { (async () => { const search = new URLSearchParams(location.search); if (search.get("useVconsole")) { const VConsole = await $appendScript("/common/libs/vconsole.min.js", "VConsole"); window._vConsole = new VConsole(); } })(); await (async () => { if (APP_VERSION && APP_VERSION !== (await $idb.get("APP_VERSION"))) { await $idb.clear(); await $idb.set("APP_VERSION", APP_VERSION); window.APP_VERSION = APP_VERSION; } await _$asyncLoadOrderAppendScrips([["/common/libs/jquery-3.7.0.min.js"], ["/common/libs/lodash.min.js", null, () => { _.$tags = $tags; _.$id = $id; _.$val = $val; _.$appendScript = $appendScript; _.$appendStyle = $appendStyle; _.$resolveCssAssetsPath = $resolveCssAssetsPath; _.$idb = $idb; _.$resolvePath = $resolvePath; _.$loadText = _$loadText; _.$asyncLoadOrderAppendScrips = _$asyncLoadOrderAppendScrips; }], ["/common/libs/dayjs.js"], ["/common/libs/vue.js"], ["/common/libs/common.ts"], ["/common/libs/common.$.ajax.ts"]]); if (isDev) { window.ONLY_USE_IN_DEV_MODEL && window.ONLY_USE_IN_DEV_MODEL(); } Vue.prototype._ = _; Vue.prototype.$X_APP_THEME = $("html").attr("data-theme"); if (window._CURENT_IS_MOBILE) { $("meta[name='viewport'").attr("content", "width=device-width, initial-scale=1.0, user-scalable=no"); function setRemBase() { const wWidth = $(window).width(); const rate = wWidth / 375; const unit = (16 * rate) / 16; $("html").css("font-size", unit + "px"); } $(window).on("resize", setRemBase).on("orientationchange", setRemBase); setRemBase(); } $appendStyle("xLoadingStyle", $resolveCssAssetsPath(`html,body,#app{height:100%;width:100%}@keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.spin{animation:spin 2s linear infinite}.x-loading{min-height:48px;position:relative;.x-loading::before{animation:spin 2s linear infinite;pointer-events:none;content:" ";display:block;top:0;bottom:0;right:0;left:0;position:absolute;background:url(/common/assets/svg/${LOADING_IMAGE_NAME}.svg)center/32px no-repeat;z-index:9999999999}`)); })(); await (async function setI18nFunction() { _.$newI18n = async function ({ lang }) { let langOptionsString = await _.$loadText(`@/i18n/${lang}.js`); langOptionsString = langOptionsString.replace("window.i18n.options = ", ""); const getLangOptionsFn = new Function(`return ${langOptionsString};`); const langOptions = getLangOptionsFn(); const i18n = function (a, b) { if (a.length > 64) { alert(`i18n a:【${a}】长度超过64，过长，建议重命名`); } /!*使用 {变量名} 赋值*!/; _.templateSettings.interpolate = /{([\s\S]+?)}/g; let temp = $val(langOptions, a); return _.template(temp)(b) || a; }; i18n.langOptions = langOptions; return i18n; }; const i18n = await _.$newI18n({ lang: I18N_LANGUAGE }); window.i18n = i18n; Vue.prototype.i18n = i18n; })(); _.$importVue.Nprogress = await _.$importVue("/common/libs/Nprogress.vue"); const APP = await _.$importVue(`${SRC_ROOT_PATH}/business_${APP_NAME}/${APP_ENTRY_NAME}.vue`); if (isDev) { window.HMR_APP = APP; } })(); })();;