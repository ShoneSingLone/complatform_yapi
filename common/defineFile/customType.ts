import { LoDashStatic } from "lodash";
export type t_xU = LoDashStatic & {
	handleBasepath: Function;
	applog: object;
	mail: object;
	$orm: Function;
	schemaToJson: Function;
	$response: Function;
	log: Function;
	fileExist: Function;
	time: Function;
	fieldSelect: Function;
	rand: Function;
	json_parse: Function;
	randStr: Function;
	getIp: Function;
	$saltIt: Function;
	expireDate: Function;
	expireDay: Function;
	sendMail: Function;
	validateSearchKeyword: Function;
	filterRes: Function;
	handleVarPath: Function;
	verifyPath: Function;
	sandbox: Function;
	trim: Function;
	ltrim: Function;
	rtrim: Function;
	ensureParamsType: Function;
	validateParams: Function;
	saveLog: Function;
	createAction: Function;
	handleParamsValue: Function;
	getCaseList: Function;
	runCaseScript: Function;
	getUserdata: Function;
	handleMockScript: Function;
	createWebAPIRequest: Function;
	storageCreator: Function;
	dayjs: Function;
	$hashCode: Function;
};

export type t_orm = {
	WikiOrder: {
		getName: Function;
		getSchema: Function;
		save: Function;
		detail: Function;
		upsertOne: Function;
		delete: Function;
		up: Function;
	};
	wiki: {
		getName: Function;
		getSchema: Function;
		save: Function;
		menu: Function;
		detail: Function;
		delete: Function;
		up: Function;
	};
	VerifyCode: {
		getName: Function;
		getSchema: Function;
		upsertOne: Function;
		findByEmail: Function;
		del: Function;
	};
	user: {
		getName: Function;
		getSchema: Function;
		save: Function;
		count: Function;
		list: Function;
		findByUids: Function;
		listWithPaging: Function;
		listCount: Function;
		findByEmail: Function;
		findById: Function;
		del: Function;
		update: Function;
		search: Function;
	};
	token: {
		getName: Function;
		getSchema: Function;
		save: Function;
		get: Function;
		findId: Function;
		up: Function;
	};
	storage: {
		getName: Function;
		getSchema: Function;
		save: Function;
		del: Function;
		get: Function;
	};
	Resource: {
		getName: Function;
		getSchema: Function;
		save: Function;
		update: Function;
		getResourceById: Function;
		getResourceByName: Function;
		findAll: Function;
		search: Function;
	};
	project: {
		getName: Function;
		constructor: Function;
		getAuthList: Function;
		getSchema: Function;
		updateMember: Function;
		save: Function;
		handleEnvNullData: Function;
		get: Function;
		getByEnv: Function;
		getProjectWithAuth: Function;
		getBaseInfo: Function;
		getByDomain: Function;
		checkNameRepeat: Function;
		checkDomainRepeat: Function;
		list: Function;
		getProjectListCount: Function;
		countWithPublic: Function;
		listWithPaging: Function;
		listCount: Function;
		countByGroupId: Function;
		del: Function;
		delByGroupid: Function;
		up: Function;
		addMember: Function;
		delMember: Function;
		checkMemberRepeat: Function;
		changeMemberRole: Function;
		changeMemberEmailNotice: Function;
		search: Function;
	};
	log: {
		getName: Function;
		getSchema: Function;
		save: Function;
		del: Function;
		list: Function;
		listWithPaging: Function;
		listWithPagingByGroup: Function;
		listCountByGroup: Function;
		listCount: Function;
		listWithCatid: Function;
	};
	interfaceCol: {
		getName: Function;
		getSchema: Function;
		save: Function;
		get: Function;
		count: Function;
		list: Function;
		del: Function;
		delByProjectId: Function;
		up: Function;
		upColIndex: Function;
	};
	interfaceCategory: {
		search: Function;
		getName: Function;
		getSchema: Function;
		save: Function;
		get: Function;
		count: Function;
		list: Function;
		del: Function;
		delByProjectId: Function;
		up: Function;
		upCatIndex: Function;
	};
	interfaceCase: {
		getName: Function;
		getSchema: Function;
		save: Function;
		getInterfaceCaseListCount: Function;
		get: Function;
		list: Function;
		del: Function;
		delByProjectId: Function;
		delByInterfaceId: Function;
		delByCol: Function;
		up: Function;
		upCaseIndex: Function;
	};
	interface: {
		constructor: Function;
		getName: Function;
		getSchema: Function;
		save: Function;
		get: Function;
		getBaseinfo: Function;
		getVar: Function;
		getByQueryPath: Function;
		getByPath: Function;
		count: Function;
		countByProjectId: Function;
		list: Function;
		listWithPage: Function;
		listByPid: Function;
		getInterfaceListCount: Function;
		listByCatid: Function;
		listByCatidWithPage: Function;
		listByOptionWithPage: Function;
		listByInterStatus: Function;
		del: Function;
		delByCatid: Function;
		delByProjectId: Function;
		up: Function;
		upEditUid: Function;
		getcustomFieldValue: Function;
		listCount: Function;
		upIndex: Function;
		search: Function;
	};
	I18n: {
		getName: Function;
		getSchema: Function;
		deleteMany: Function;
		save: Function;
		up: Function;
		list: Function;
		keyValue: Function;
		detail: Function;
		detailByKey: Function;
		insertMany: Function;
	};
	group: {
		getName: Function;
		getSchema: Function;
		save: Function;
		get: Function;
		updateMember: Function;
		getByPrivateUid: Function;
		getGroupById: Function;
		count: Function;
		getGroupListCount: Function;
		addMember: Function;
		delMember: Function;
		changeMemberRole: Function;
		checkMemberRepeat: Function;
		list: Function;
		getAuthList: Function;
		findByGroups: Function;
		del: Function;
		up: Function;
		getcustomFieldName: Function;
		search: Function;
	};
	follow: {
		getName: Function;
		getSchema: Function;
		save: Function;
		del: Function;
		delByProjectId: Function;
		list: Function;
		listByProjectId: Function;
		checkProjectRepeat: Function;
		updateById: Function;
	};

	avatar: {
		getName: Function;
		getSchema: Function;
		getBy: Function;
		get: Function;
		upsert: Function;
	};
};
